// Generated by CoffeeScript 1.8.0
(function() {
  var config, error404, file_path, filename404, fs, http, knox, rimraf, s3, server, spawn;

  knox = require('knox');

  config = require('./config').config();

  http = require('http');

  rimraf = require('rimraf');

  file_path = require('path');

  fs = require('fs');

  spawn = require('child_process').spawn;

  filename404 = file_path.resolve(__dirname, '404.html');

  error404 = fs.readFileSync(filename404);

  s3 = knox.createClient({
    key: config.key,
    secret: config.secret,
    bucket: "asgard-production"
  });

  server = http.createServer(function(req, res) {
    var address, e, filename, path, serveFilePathWithFallback, text, token, _ref, _ref1;
    address = req.headers.host.split(":")[0];
    filename = req.url;
    if (address === "localhost") {
      address = "www.riothq.com";
    }
    filename = filename.split("?")[0] || "/index.html";
    if (address.slice(0, 4) === "www.") {
      address = address.slice(4);
    }
    if (address === "getforge.io") {
      res.writeHead(302, {
        'Location': 'http://getforge.com'
      });
      return res.end();
    }
    if (filename === '/_asgard_health_check.html') {
      return res.end();
    }
    if (filename === "/_asgard_cache_buster") {
      rimraf("/tmp/cache/" + address, function() {
        return res.end();
      });
      rimraf("/tmp/cache/www." + address, function() {
        return res.end();
      });
      spawn('restart nginx', [], {
        stdio: 'inherit'
      });
      return res.end();
    }
    if (filename === "/") {
      filename = "/index.html";
    } else if (filename.slice(-1) === "/") {
      filename += "index.html";
    } else if (((_ref = filename.slice(-4)) === '.gif' || _ref === '.mpg' || _ref === '.mp4' || _ref === '.jpg' || _ref === '.css' || _ref === '.ico' || _ref === '.css' || _ref === '.png' || _ref === '.mov' ||  _ref === '.svg') || ((_ref1 = filename.slice(-3)) === '.js')) {
      try {
        text = fs.readFileSync("/tmp/cache/" + address + "/index", 'utf8');
        token = text.match(/forge-token:(.*[0-9])/)[1];
        res.writeHead(302, {
          'Location': "http://asgard-production.s3.amazonaws.com/" + address + "/" + token + filename
        });
        res.end();
      } catch (_error) {
        e = _error;
        res.end();
      }
    } else if (filename.slice(-5) !== ".html" && filename.slice(-4) !== '.ico' && filename.slice(-4) !== ".htm") {
      filename += ".html";
    }
    path = address + filename;
    serveFilePathWithFallback = function(path, errorCallback) {
      return s3.get(path).on('response', function(res_from_s3) {
        var statusCode;
        if (res_from_s3.statusCode === 200) {
          statusCode = res_from_s3.statusCode;
          if (path.slice(10) === "/404.html") {
            statusCode = 404;
          }
          res.writeHead(statusCode, {
            'content-type': res_from_s3.headers['content-type']
          });
          res_from_s3.on('data', function(chunk) {
            return res.write(chunk);
          });
          return res_from_s3.on('end', function() {
            return res.end();
          });
        } else {
          return errorCallback();
        }
      }).end();
    };
    return serveFilePathWithFallback(path, function() {
      return serveFilePathWithFallback("" + address + "/404.html", function() {
        res.writeHead(404, {
          'content-type': 'text/html'
        });
        res.write(error404);
        return res.end();
      });
    });
  });

  server.listen(config.port);

}).call(this);
